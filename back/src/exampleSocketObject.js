let Socket = {
    _events: [Object: null prototype] {
        disconnect: [
            [Function: handler],
            [Function(anonymous)]
        ],
        message: [Function: handler]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    nsp: < ref * 2 > Namespace {
        _events: [Object: null prototype] { connection: [Function(anonymous)] },
        _eventsCount: 1,
        _maxListeners: undefined,
        sockets: Map(1) { 'Xtdx3s3pD18QTCirAAAB' => [Circular * 1] },
        _fns: [],
        _ids: 0,
        server: Server {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            _nsps: [Map],
            parentNsps: Map(0) {},
            _path: '/socket.io',
            clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,
            _connectTimeout: 45000,
            _serveClient: true,
            _parser: [Object],
            encoder: Encoder {},
            _adapter: [class Adapter extends EventEmitter],
            sockets: [Circular * 2],
            opts: {},
            eio: [Server],
            httpServer: [Server],
            engine: [Server],
            [Symbol(kCapture)]: false
        },
        name: '/',
        adapter: Adapter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            nsp: [Circular * 2],
            rooms: [Map],
            sids: [Map],
            encoder: Encoder {},
            [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false
    },
    client: Client {
        sockets: Map(1) { 'Xtdx3s3pD18QTCirAAAB' => [Circular * 1] },
        nsps: Map(1) { '/' => [Circular * 1] },
        server: Server {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            _nsps: [Map],
            parentNsps: Map(0) {},
            _path: '/socket.io',
            clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,
            _connectTimeout: 45000,
            _serveClient: true,
            _parser: [Object],
            encoder: Encoder {},
            _adapter: [class Adapter extends EventEmitter],
            sockets: [Namespace],
            opts: {},
            eio: [Server],
            httpServer: [Server],
            engine: [Server],
            [Symbol(kCapture)]: false
        },
        conn: Socket {
            _events: [Object: null prototype],
            _eventsCount: 3,
            _maxListeners: undefined,
            id: 'pCR0McP59eSMuPXUAAAA',
            server: [Server],
            upgrading: false,
            upgraded: false,
            _readyState: 'open',
            writeBuffer: [],
            packetsFn: [],
            sentCallbackFn: [],
            cleanupFn: [Array],
            request: [IncomingMessage],
            protocol: 4,
            remoteAddress: '::ffff:127.0.0.1',
            checkIntervalTimer: null,
            upgradeTimeoutTimer: null,
            pingTimeoutTimer: Timeout {
                _idleTimeout: 45000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 2410,
                _onTimeout: [Function(anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 30,
                [Symbol(triggerId)]: 13
            },
            pingIntervalTimer: Timeout {
                _idleTimeout: 25000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 2377,
                _onTimeout: [Function(anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 22,
                [Symbol(triggerId)]: 0
            },
            transport: [WebSocket],
            [Symbol(kCapture)]: false
        },
        encoder: Encoder {},
        decoder: Decoder { _callbacks: [Object] },
        id: 'pCR0McP59eSMuPXUAAAA',
        onclose: [Function: bound onclose],
        ondata: [Function: bound ondata],
        onerror: [Function: bound onerror],
        ondecoded: [Function: bound ondecoded],
        connectTimeout: undefined
    },
    data: {},
    connected: true,
    acks: Map(0) {},
    fns: [],
    flags: {},
    server: < ref * 3 > Server {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        _nsps: Map(1) { '/' => [Namespace] },
        parentNsps: Map(0) {},
        _path: '/socket.io',
        clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,
        _connectTimeout: 45000,
        _serveClient: true,
        _parser: {
            protocol: 5,
            PacketType: [Object],
            Encoder: [class Encoder],
            Decoder: [class Decoder extends Emitter]
        },
        encoder: Encoder {},
        _adapter: [class Adapter extends EventEmitter],
        sockets: < ref * 2 > Namespace {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            sockets: [Map],
            _fns: [],
            _ids: 0,
            server: [Circular * 3],
            name: '/',
            adapter: [Adapter],
            [Symbol(kCapture)]: false
        },
        opts: {},
        eio: Server {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            clients: [Object],
            clientsCount: 1,
            opts: [Object],
            ws: [WebSocketServer],
            [Symbol(kCapture)]: false
        },
        httpServer: Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype],
            _eventsCount: 5,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '6::::15600',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 8
        },
        engine: Server {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            clients: [Object],
            clientsCount: 1,
            opts: [Object],
            ws: [WebSocketServer],
            [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false
    },
    adapter: < ref * 4 > Adapter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        nsp: < ref * 2 > Namespace {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            sockets: [Map],
            _fns: [],
            _ids: 0,
            server: [Server],
            name: '/',
            adapter: [Circular * 4],
            [Symbol(kCapture)]: false
        },
        rooms: Map(1) { 'Xtdx3s3pD18QTCirAAAB' => [Set] },
        sids: Map(1) { 'Xtdx3s3pD18QTCirAAAB' => [Set] },
        encoder: Encoder {},
        [Symbol(kCapture)]: false
    },
    id: 'Xtdx3s3pD18QTCirAAAB',
    handshake: {
        headers: {
            'sec-websocket-version': '13',
            'sec-websocket-key': '6Q5W88KcJeaGECUncn7h+w==',
            connection: 'Upgrade',
            upgrade: 'websocket',
            'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits',
            host: 'localhost:15600'
        },
        time: 'Wed May 11 2022 18:06:49 GMT+0200 (hora de verano de Europa central)',
        address: '::ffff:127.0.0.1',
        xdomain: false,
        secure: false,
        issued: 1652285209487,
        url: '/socket.io/?EIO=4&transport=websocket',
        query: [Object: null prototype] { EIO: '4', transport: 'websocket' },
        auth: {}
    },
    [Symbol(kCapture)]: false
}